'use strict'
const fs = require('fs');

class CreatingWorld {
	constructor(db, world) {
		this.db = db;
		this.world = world;
	}
/*	//l - массив с номерами локаций
	changeWeather(change, ...l) {
		for(let i = 0; i < l.length; i++) {
			world.nosort[l[i]].public.weather = change;
		}
	} */
	getLocsName(res) {
		const stack = [this.world.info.totalLocs];
		for(let i = 1; i <= this.world.info.totalLocs; i++) stack.push(this.world.locs[i].public.name);
		if (res) {
			res.setHeader('content-type', 'application/json; charset=utf-8');
			res.end(JSON.stringify(stack));
		}
		return stack;
	}
	addLocation(res, data, dir) {
		let	{disa, name, objs, paths, texs} = data, len,
			disallow = [], landscape = [], canRun = false;
		res.setHeader('content-type', 'application/json; charset=utf-8');
		if (!name) { res.end(JSON.stringify({res: 0, msg: 'вы не ввели название локации'})); return; }

		for(let i = 20; i < 141; i++) {
			if (!disa[i].length) continue;
			for(let j = 0; j < 31; j++) {
				if (!disa[i][j]) continue;
				disallow.push([i, j]);
			}
		}

		paths.pop(); objs.pop();

		paths = paths.filter(x => { if (x) return x });
		objs = objs.filter(x => { if (x) return x });

		len = objs.length;
		for(let j = 0; j < len; j++) {
			fs.readFile(dir + `/img/details/${objs[j].n}.svg`, 'utf8', (err, data) => {
				if (err) {
					res.end(JSON.stringify({res: 0, msg: 'произошла ошибка на стороне сервера'}));
					console.log(err); return;
				}
				let	width = data.match(/width="\d+"/i)[0].match(/\d+/)[0] * objs[j].s,
					height = data.match(/height="\d+"/i)[0].match(/\d+/)[0] * objs[j].s,
					l = objs[j].colors.length;
//				console.log(objs[j].noserve);
				if (objs[j].noserve) {
					landscape.push({chunk: objs[j].chunk, height: height, width: width,
					texture: objs[j].noserve});
					if (j + 1 == len) canRun = true;
				} else {
					let i = 0;
					for(; i < l; i++) if (objs[j].d[i] != objs[j].colors[i]) break;
					if (i == l) {
						landscape.push({chunk: objs[j].chunk, height: height, width: width,
						texture: `/img/details/${objs[j].n}.svg`});
						if (j + 1 == len) canRun = true;
					} else {
						for(i = 0; i < l; i++) {
							data = data.replace(new RegExp(objs[j].d[i], 'ig'), objs[j].colors[i]);
						}
						fs.writeFile(dir + `/img/details/${objs[j].n}/${++this.world.info.lastDetails[objs[j].n]}.svg`, data, (err) => {
							if (err) {
								res.end(JSON.stringify({res: 0, msg: 'произошла ошибка на стороне сервера'}));
								console.log(err); return;
							}
							landscape.push({chunk: objs[j].chunk, height: height, width: width,
							texture: `/img/details/${objs[j].n}/${this.world.info.lastDetails[objs[j].n]}.svg`});
							if (j + 1 == len) canRun = true;
						});
					}
				}
			});
		}
		const controlCanRun = setInterval(() => {
			console.log(canRun);
			if (canRun) {
				this.world.locs[++this.world.info.totalLocs] = {
					public: {
						name: name,
						weather: 'sun',
						fill: [],
						landscape: landscape,
						surface: `/img/textures/${texs || 0}.svg`,
					},
					paths: paths,
					disallow: disallow,
				}
				console.log(JSON.stringify(this.world));
				//отправить клиенту что локация создана
				clearInterval(controlCanRun);
			}
		}, 1000);
	}
	getNamesDetails(res, dir) {
		res.setHeader('content-type', 'application/json; charset=utf-8');
		fs.readdir(dir + `/img/details/`, (err, dirs) => {
			if (err) {
				res.end(JSON.stringify({res: 0, msg: 'произошла ошибка на стороне сервера'}));
				return;
			}
			dirs = dirs.filter((x) => { if (!/svg/.test(x)) return x; });
			let namesDetails = [], l = dirs.length;
			for(let i = 0; i < l; i++) {
				if (err) {
					res.end(JSON.stringify({res: 0, msg: 'произошла ошибка на стороне сервера'}));
					return;
				}
				fs.readdir(dir + `/img/details/${dirs[i]}`, (err, files) => {
					if (files.length) namesDetails = namesDetails.concat(files.map(x => `/img/details/${dirs[i]}/` + x));
					if (i + 1 == l) res.end(JSON.stringify({res: 1, data: namesDetails}));
				});
			}
		});
	}
	static include(db, world) {
		return new CreatingWorld(db, world);
	}
}

module.exports = CreatingWorld;
